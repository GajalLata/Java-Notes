<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="#FAF6F6"
    android:orientation="vertical"
    tools:context=".six">

    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_margin="5dp"
        tools:ignore="SpeakableTextPresentCheck">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="#F6FAF9"
            android:orientation="vertical">


            <TextView
                android:id="@+id/textView56"
                style="bold"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_margin="10dp"
                android:background="#C5AFAD"
                android:padding="10dp"
                android:text="Keywords"
                android:textColor="#B71C1C"
                android:textSize="44sp" />

            <TextView
                android:id="@+id/textView2"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginTop="10dp"

                android:layout_marginRight="10dp"
                android:background="#ffffff"
                android:padding="10dp"
                android:text="Java keywords are also known as reserved words.
                 Keywords are particular words that act as a key to a code.\nThese are predefined words by Java so they cannot be used as a variable or object name or class name."
                android:textColor="#000000"
                android:textSize="24sp" />

            <ImageView
                android:id="@+id/imageView7"
                android:layout_width="match_parent"
                android:layout_height="289dp"
                android:layout_margin="20dp"
                android:background="#759E9A"

                app:srcCompat="@drawable/keywords" />

            <TextView
                android:id="@+id/textView67"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginTop="10dp"

                android:layout_marginRight="10dp"
                android:layout_marginBottom="5dp"
                android:background="#101010"
                android:padding="10dp"
                android:text="List of Java Keywords"
                android:textColor="#FAF6F6"
                android:textSize="30sp"
                android:textStyle="bold" />

            <TextView
                android:id="@+id/textView70"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"

                android:layout_marginRight="10dp"
                android:background="#ffffff"
                android:padding="10dp"
                android:text="A list of Java keywords or reserved words are given below:

\n\n1.abstract: Java abstract keyword is used to declare an abstract class. An abstract class can provide the implementation of the interface.\nIt can have abstract and non-abstract methods.
\n\n2.boolean: Java boolean keyword is used to declare a variable as a boolean type. It can hold True and False values only.
\n\n3.break: Java break keyword is used to break the loop or switch statement. It breaks the current flow of the program at specified conditions.
\n\n4.byte: Java byte keyword is used to declare a variable that can hold 8-bit data values.
\n\n5.case: Java case keyword is used with the switch statements to mark blocks of text.
\n\n6.catch: Java catch keyword is used to catch the exceptions generated by try statements. It must be used after the try block only.
\n\n7.char: Java char keyword is used to declare a variable that can hold unsigned 16-bit Unicode characters
\n\n8.class: Java class keyword is used to declare a class.
\n\n9.continue: Java continue keyword is used to continue the loop. It continues the current flow of the program and skips the remaining code at the specified condition.
\n\n10.default: Java default keyword is used to specify the default block of code in a switch statement.
\n\n11.do: Java do keyword is used in the control statement to declare a loop. It can iterate a part of the program several times.
\n\n12.double: Java double keyword is used to declare a variable that can hold 64-bit floating-point number.
\n13.else: Java else keyword is used to indicate the alternative branches in an if statement.
\n\n14.enum: Java enum keyword is used to define a fixed set of constants. Enum constructors are always private or default.
\n\n15extends: Java extends keyword is used to indicate that a class is derived from another class or interface.
\n\n16.super: Java super keyword is a reference variable that is used to refer to parent class objects. It can be used to invoke the immediate parent class method.
\n\n17.final: Java final keyword is used to indicate that a variable holds a constant value. It is used with a variable. It is used to restrict the user from updating the value of the variable.
\n\n18.finally: Java finally keyword indicates a block of code in a try-catch structure. This block is always executed whether an exception is handled or not.
\n\n19.float: Java float keyword is used to declare a variable that can hold a 32-bit floating-point number.
\n\n20.for: Java for keyword is used to start a for loop. It is used to execute a set of instructions/functions repeatedly when some condition becomes true. If the number of iteration is fixed, it is recommended to use for loop.
\n\n21.if: Java if keyword tests the condition. It executes the if block if the condition is true.
\n\n22.implements: Java implements keyword is used to implement an interface.
\n\n23.import: Java import keyword makes classes and interfaces available and accessible to the current source code.
\n\n24.instanceof: Java instanceof keyword is used to test whether the object is an instance of the specified class or implements an interface.
\n\n25.int: Java int keyword is used to declare a variable that can hold a 32-bit signed integer.
\n\n26.interface: Java interface keyword is used to declare an interface. It can have only abstract methods.
\n\n27.long: Java long keyword is used to declare a variable that can hold a 64-bit integer.
\n\n28.native: Java native keyword is used to specify that a method is implemented in native code using JNI (Java Native Interface).
\n\n29.new: Java new keyword is used to create new objects.
\n\n30.null: Java null keyword is used to indicate that a reference does not refer to anything. It removes the garbage value.
\n\n31.package: Java package keyword is used to declare a Java package that includes the classes.
\n\n32.private: Java private keyword is an access modifier. It is used to indicate that a method or variable may be accessed only in the class in which it is declared.
\n\n33.protected: Java protected keyword is an access modifier. It can be accessible within the package and outside the package but through inheritance only. It can't be applied with the class.
\n\n34.public: Java public keyword is an access modifier. It is used to indicate that an item is accessible anywhere. It has the widest scope among all other modifiers.
\n\n35.return: Java return keyword is used to return from a method when its execution is complete.
\n\n36.short: Java short keyword is used to declare a variable that can hold a 16-bit integer.
\n\n37.static: Java static keyword is used to indicate that a variable or method is a class method. The static keyword in Java is mainly used for memory management.
\n\n38.strictfp: Java strictfp is used to restrict the floating-point calculations to ensure portability.

\n\n39.switch: The Java switch keyword contains a switch statement that executes code based on test value. The switch statement tests the equality of a variable against multiple values.
\n\n40.synchronized: Java synchronized keyword is used to specify the critical sections or methods in multithreaded code.
\n\n41.this: Java this keyword can be used to refer the current object in a method or constructor.
\n\n42.throw: The Java throw keyword is used to explicitly throw an exception. The throw keyword is mainly used to throw custom exceptions. It is followed by an instance.
\n\n43.throws: The Java throws keyword is used to declare an exception. Checked exceptions can be propagated with throws.
\n\n44.transient: Java transient keyword is used in serialization. If you define any data member as transient, it will not be serialized.
\n\n45.try: Java try keyword is used to start a block of code that will be tested for exceptions. The try block must be followed by either catch or finally block.
\n\n46.void: Java void keyword is used to specify that a method does not have a return value.
\n\n47.volatile: Java volatile keyword is used to indicate that a variable may change asynchronously.
\n\n48.while: Java while keyword is used to start a while loop. This loop iterates a part of the program several times. If the number of iteration is not fixed, it is recommended to use the while loop.
"
                android:textColor="#000000"
                android:textSize="24sp" />

            <TextView
                android:id="@+id/textView16"
                style="bold"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_margin="10dp"
                android:background="#C5AFAD"
                android:padding="10dp"
                android:text="Literals"
                android:textColor="#B71C1C"
                android:textSize="44sp" />

            <TextView
                android:id="@+id/textView63"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginTop="10dp"

                android:layout_marginRight="10dp"
                android:background="#ffffff"
                android:padding="10dp"
                android:text="A constant value that can be assigned to the variable is called a literal.
                \nLiterals in Java can be classified into six types, as below:

            \n1.Integral Literals
           \n2.Floating-point Literals
            \n3.Char Literals
            \n4.String Literals
            \n5.Boolean Literals
            \n6.Null Literals"
                android:textColor="#000000"
                android:textSize="24sp" />

            <TextView
                android:id="@+id/textView61"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:layout_marginLeft="10dp"
                android:layout_marginTop="10dp"

                android:layout_marginRight="10dp"
                android:background="#ffffff"
                android:padding="10dp"
                android:text="Example:

\n\n101 – Integer literal
\n10.1f – float literal
\n10.1 – double literal (default type for decimals)
\n‘A’ – character literal
\ntrue – Boolean literal
\n“Java” – String literal"
                android:textColor="#000000"
                android:textSize="24sp" />


        </LinearLayout>
    </ScrollView>
</LinearLayout>